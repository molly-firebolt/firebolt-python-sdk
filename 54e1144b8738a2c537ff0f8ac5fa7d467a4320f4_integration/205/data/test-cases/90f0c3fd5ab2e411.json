{"uid":"90f0c3fd5ab2e411","name":"test_server_side_async_execution_get_status","fullName":"tests.integration.dbapi.sync.test_queries#test_server_side_async_execution_get_status","historyId":"a86089f9696a03ccfdac46bd35e73ae4","time":{"start":1682611418051,"stop":1682611418051,"duration":0},"description":"Test get_status().","descriptionHtml":"<p>Test get_status().</p>\n","status":"skipped","statusMessage":"Skipped: Can't get consistently slow queries so fails significant portion of time. get_status() always returns a QueryStatus object, so this assertion will always pass. Error condition of invalid status is caught in get_status().","statusTrace":"('/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/integration/dbapi/sync/test_queries.py', 456, \"Skipped: Can't get consistently slow queries so fails significant portion of time. get_status() always returns a QueryStatus object, so this assertion will always pass. Error condition of invalid status is caught in get_status().\")","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"tag","value":"asyncio"},{"name":"tag","value":"@pytest.mark.skip(reason='Can't get consistently slow queries so fails significant portion of time. get_status() always returns a QueryStatus object, so this assertion will always pass. Error condition of invalid status is caught in get_status().')"},{"name":"parentSuite","value":"tests.integration.dbapi.sync"},{"name":"suite","value":"test_queries"},{"name":"host","value":"fv-az1236-303"},{"name":"thread","value":"2541-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.dbapi.sync.test_queries"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["asyncio","@pytest.mark.skip(reason='Can't get consistently slow queries so fails significant portion of time. get_status() always returns a QueryStatus object, so this assertion will always pass. Error condition of invalid status is caught in get_status().')"]},"source":"90f0c3fd5ab2e411.json","parameterValues":[]}