{
  "uid" : "2bfaff9ee5597ba1",
  "name" : "test_drop_create",
  "fullName" : "tests.integration.dbapi.async.test_queries_async#test_drop_create",
  "historyId" : "94ca411d7860cde52743cd446dd03840",
  "time" : {
    "start" : 1684940095808,
    "stop" : 1684940098404,
    "duration" : 2596
  },
  "description" : "Create and drop table/index queries are handled properly.",
  "descriptionHtml" : "<p>Create and drop table/index queries are handled properly.</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 0 == -1\n  +0\n  --1",
  "statusTrace" : "connection = <firebolt.async_db.connection.Connection object at 0x7f22a910c360>\n\n    async def test_drop_create(connection: Connection) -> None:\n        \"\"\"Create and drop table/index queries are handled properly.\"\"\"\n    \n        async def test_query(c: Cursor, query: str) -> None:\n            await c.execute(query)\n            assert c.description == None\n            assert c.rowcount == -1\n    \n        \"\"\"Create table query is handled properly\"\"\"\n        with connection.cursor() as c:\n            # Cleanup\n            await c.execute(\"DROP JOIN INDEX IF EXISTS test_drop_create_async_db_join_idx\")\n            await c.execute(\n                \"DROP AGGREGATING INDEX IF EXISTS test_drop_create_async_db_agg_idx\"\n            )\n            await c.execute(\"DROP TABLE IF EXISTS test_drop_create_async_tb\")\n            await c.execute(\"DROP TABLE IF EXISTS test_drop_create_async_tb_dim\")\n    \n            # Fact table\n            await test_query(\n                c,\n                \"CREATE FACT TABLE test_drop_create_async(id int, sn string null, f float,\"\n                \"d date, dt datetime, b bool, a array(int)) primary index id\",\n            )\n    \n            # Dimension table\n            await test_query(\n                c,\n                \"CREATE DIMENSION TABLE test_drop_create_async_dim(id int, sn string null\"\n                \", f float, d date, dt datetime, b bool, a array(int))\",\n            )\n    \n            # Create join index\n            await test_query(\n                c,\n                \"CREATE JOIN INDEX test_db_join_idx ON \"\n                \"test_drop_create_async_dim(id, sn, f)\",\n            )\n    \n            # Create aggregating index\n            await test_query(\n                c,\n>               \"CREATE AGGREGATING INDEX test_db_agg_idx ON \"\n                \"test_drop_create_async(id, sum(f), count(dt))\",\n            )\n\ntests/integration/dbapi/async/test_queries_async.py:240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nc = <firebolt.async_db.cursor.Cursor object at 0x7f22a9325a70>\nquery = 'CREATE AGGREGATING INDEX test_db_agg_idx ON test_drop_create_async(id, sum(f), count(dt))'\n\n    async def test_query(c: Cursor, query: str) -> None:\n        await c.execute(query)\n        assert c.description == None\n>       assert c.rowcount == -1\nE       assert 0 == -1\nE         +0\nE         --1\n\ntests/integration/dbapi/async/test_queries_async.py:204: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "database_name",
    "time" : {
      "start" : 1684940094170,
      "stop" : 1684940094170,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "username",
    "time" : {
      "start" : 1684940094170,
      "stop" : 1684940094170,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "password",
    "time" : {
      "start" : 1684940094170,
      "stop" : 1684940094171,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "event_loop",
    "time" : {
      "start" : 1684940095512,
      "stop" : 1684940095512,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "password_auth",
    "time" : {
      "start" : 1684940094171,
      "stop" : 1684940094477,
      "duration" : 306
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_endpoint",
    "time" : {
      "start" : 1684940094477,
      "stop" : 1684940094477,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "account_name",
    "time" : {
      "start" : 1684940094477,
      "stop" : 1684940094477,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "engine_url",
    "time" : {
      "start" : 1684940094170,
      "stop" : 1684940094170,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "connection",
    "time" : {
      "start" : 1684940095513,
      "stop" : 1684940095807,
      "duration" : 294
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Create and drop table/index queries are handled properly.",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 0 == -1\n  +0\n  --1",
    "statusTrace" : "connection = <firebolt.async_db.connection.Connection object at 0x7f22a910c360>\n\n    async def test_drop_create(connection: Connection) -> None:\n        \"\"\"Create and drop table/index queries are handled properly.\"\"\"\n    \n        async def test_query(c: Cursor, query: str) -> None:\n            await c.execute(query)\n            assert c.description == None\n            assert c.rowcount == -1\n    \n        \"\"\"Create table query is handled properly\"\"\"\n        with connection.cursor() as c:\n            # Cleanup\n            await c.execute(\"DROP JOIN INDEX IF EXISTS test_drop_create_async_db_join_idx\")\n            await c.execute(\n                \"DROP AGGREGATING INDEX IF EXISTS test_drop_create_async_db_agg_idx\"\n            )\n            await c.execute(\"DROP TABLE IF EXISTS test_drop_create_async_tb\")\n            await c.execute(\"DROP TABLE IF EXISTS test_drop_create_async_tb_dim\")\n    \n            # Fact table\n            await test_query(\n                c,\n                \"CREATE FACT TABLE test_drop_create_async(id int, sn string null, f float,\"\n                \"d date, dt datetime, b bool, a array(int)) primary index id\",\n            )\n    \n            # Dimension table\n            await test_query(\n                c,\n                \"CREATE DIMENSION TABLE test_drop_create_async_dim(id int, sn string null\"\n                \", f float, d date, dt datetime, b bool, a array(int))\",\n            )\n    \n            # Create join index\n            await test_query(\n                c,\n                \"CREATE JOIN INDEX test_db_join_idx ON \"\n                \"test_drop_create_async_dim(id, sn, f)\",\n            )\n    \n            # Create aggregating index\n            await test_query(\n                c,\n>               \"CREATE AGGREGATING INDEX test_db_agg_idx ON \"\n                \"test_drop_create_async(id, sum(f), count(dt))\",\n            )\n\ntests/integration/dbapi/async/test_queries_async.py:240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nc = <firebolt.async_db.cursor.Cursor object at 0x7f22a9325a70>\nquery = 'CREATE AGGREGATING INDEX test_db_agg_idx ON test_drop_create_async(id, sum(f), count(dt))'\n\n    async def test_query(c: Cursor, query: str) -> None:\n        await c.execute(query)\n        assert c.description == None\n>       assert c.rowcount == -1\nE       assert 0 == -1\nE         +0\nE         --1\n\ntests/integration/dbapi/async/test_queries_async.py:204: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9257d21f1ded7e44",
      "name" : "log",
      "source" : "9257d21f1ded7e44.txt",
      "type" : "text/plain",
      "size" : 812
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "event_loop::0",
    "time" : {
      "start" : 1684940098439,
      "stop" : 1684940098440,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "connection::finalizer",
    "time" : {
      "start" : 1684940098438,
      "stop" : 1684940098438,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "asyncio"
  }, {
    "name" : "parentSuite",
    "value" : "tests.integration.dbapi.async"
  }, {
    "name" : "suite",
    "value" : "test_queries_async"
  }, {
    "name" : "host",
    "value" : "fv-az395-180"
  }, {
    "name" : "thread",
    "value" : "2468-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.integration.dbapi.async.test_queries_async"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "asyncio" ]
  },
  "source" : "2bfaff9ee5597ba1.json",
  "parameterValues" : [ ]
}